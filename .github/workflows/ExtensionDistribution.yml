name: Prebuilt binaries (linux/amd64, osx/amd64, and osx/arm64)

on:
  push:
    paths:
      - ".github/workflows/ExtensionDistribution.yml"
      - "*.patch"

env:
  PG_MAJOR: "17"
  PGVECTOR_REF: "v0.8.0"

jobs:
  # ===== Linux (linux/amd64) build =====
  build-linux:
    name: Linux (${{ matrix.patch_name }}, amd64)
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        patch_file:
          - "pgvector_v0.8.0_hnsw_candidate_pruning_simhash.patch"
          - "pgvector_v0.8.0_hnsw_candidate_pruning_pq.patch"
        include:
          - patch_file: "pgvector_v0.8.0_hnsw_candidate_pruning_simhash.patch"
            patch_name: "SimHash"
          - patch_file: "pgvector_v0.8.0_hnsw_candidate_pruning_pq.patch"
            patch_name: "PQ"

    # NOTE: 'container.image' cannot use the 'env' context at compile time.
    # If you change PG_MAJOR above, update this tag accordingly.
    container:
      image: postgres:17-bookworm

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Show effective parameters
        run: |
          echo "PG_MAJOR=$PG_MAJOR"
          echo "PGVECTOR_REF=$PGVECTOR_REF"
          echo "PATCH_FILE=${{ matrix.patch_file }}"
          echo "PATCH_NAME=${{ matrix.patch_name }}"
          echo "Base image: postgres:17-bookworm"

      - name: Install build dependencies
        run: |
          set -eux
          apt-get update
          apt-get install -y --no-install-recommends \
            build-essential \
            postgresql-server-dev-$PG_MAJOR \
            ca-certificates \
            git \
            patch

      - name: Fetch pgvector source at the requested ref (tag or SHA)
        run: |
          set -eux
          git clone --depth 1 https://github.com/pgvector/pgvector.git /tmp/pgvector
          cd /tmp/pgvector
          git fetch --tags --depth 1 origin "$PGVECTOR_REF" || true
          if git rev-parse --verify --quiet "$PGVECTOR_REF" >/dev/null; then
            git checkout "$PGVECTOR_REF"
          else
            git checkout FETCH_HEAD
          fi
          git --no-pager log -1 --oneline

      - name: Apply patch file
        working-directory: /tmp/pgvector
        run: |
          set -eux
          test -f "${GITHUB_WORKSPACE}/${{ matrix.patch_file }}"
          patch -p1 < "${GITHUB_WORKSPACE}/${{ matrix.patch_file }}"

      - name: Build
        working-directory: /tmp/pgvector
        run: |
          set -eux
          make clean
          make OPTFLAGS=""

      - name: Install
        working-directory: /tmp/pgvector
        run: |
          set -eux
          make install

      - name: Compute artifact name (linux)
        id: meta
        run: |
          set -eux
          name="pgvector-${PGVECTOR_REF}-pg${PG_MAJOR}-${{ matrix.patch_name }}-linux-amd64"
          echo "ARTIFACT_NAME=${name}" >> "$GITHUB_ENV"
          echo "artifact_name=${name}" >> "$GITHUB_OUTPUT"

      - name: Collect installed files as artifact
        id: collect
        run: |
          set -eux
          PKGLIBDIR="$(pg_config --pkglibdir)"
          SHAREDIR="$(pg_config --sharedir)"
          EXT_DIR="$SHAREDIR/extension"

          mkdir -p artifact/lib artifact/extension
          cp "$PKGLIBDIR/vector.so" artifact/lib/
          cp "$EXT_DIR"/vector*.sql "$EXT_DIR"/vector.control artifact/extension/

          tar -C artifact -czf "${ARTIFACT_NAME}.tar.gz" .
          echo "tarpath=${ARTIFACT_NAME}.tar.gz" >> "$GITHUB_OUTPUT"

      - name: Upload artifact (tarball)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.meta.outputs.artifact_name }}
          path: ${{ steps.collect.outputs.tarpath }}

  # ===== macOS (osx/amd64) build on Intel runner =====
  build-macos-amd64:
    name: macOS amd64 (${{ matrix.patch_name }}, Intel)
    runs-on: macos-13
    strategy:
      fail-fast: false
      matrix:
        patch_file:
          - "pgvector_v0.8.0_hnsw_candidate_pruning_simhash.patch"
          - "pgvector_v0.8.0_hnsw_candidate_pruning_pq.patch"
        include:
          - patch_file: "pgvector_v0.8.0_hnsw_candidate_pruning_simhash.patch"
            patch_name: "SimHash"
          - patch_file: "pgvector_v0.8.0_hnsw_candidate_pruning_pq.patch"
            patch_name: "PQ"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Show effective parameters
        run: |
          echo "PG_MAJOR=$PG_MAJOR"
          echo "PGVECTOR_REF=$PGVECTOR_REF"
          echo "PATCH_FILE=${{ matrix.patch_file }}"
          echo "PATCH_NAME=${{ matrix.patch_name }}"
          echo "Runner: macOS Intel (amd64)"

      - name: Install PostgreSQL via Homebrew
        run: |
          set -eux
          brew update
          brew install "postgresql@${PG_MAJOR}"
          BREW_PREFIX="$(brew --prefix postgresql@${PG_MAJOR})"
          echo "BREW_PREFIX=${BREW_PREFIX}"
          echo "${BREW_PREFIX}/bin" >> $GITHUB_PATH

      - name: Verify toolchain and pg_config
        run: |
          set -eux
          which clang || true
          which make
          which pg_config
          pg_config --version
          pg_config --pkglibdir
          pg_config --sharedir

      - name: Fetch pgvector source at the requested ref (tag or SHA)
        run: |
          set -eux
          git clone --depth 1 https://github.com/pgvector/pgvector.git /tmp/pgvector
          cd /tmp/pgvector
          git fetch --tags --depth 1 origin "$PGVECTOR_REF" || true
          if git rev-parse --verify --quiet "$PGVECTOR_REF" >/dev/null; then
            git checkout "$PGVECTOR_REF"
          else
            git checkout FETCH_HEAD
          fi
          git --no-pager log -1 --oneline

      - name: Apply patch file
        working-directory: /tmp/pgvector
        run: |
          set -eux
          test -f "${GITHUB_WORKSPACE}/${{ matrix.patch_file }}"
          patch -p1 < "${GITHUB_WORKSPACE}/${{ matrix.patch_file }}"

      - name: Build (macOS Intel)
        working-directory: /tmp/pgvector
        env:
          CC: clang
        run: |
          set -eux
          make clean
          make OPTFLAGS=""

      - name: Install
        working-directory: /tmp/pgvector
        run: |
          set -eux
          make install

      - name: Compute artifact name (osx-amd64)
        id: meta
        run: |
          set -eux
          name="pgvector-${PGVECTOR_REF}-pg${PG_MAJOR}-${{ matrix.patch_name }}-osx-amd64"
          echo "ARTIFACT_NAME=${name}" >> "$GITHUB_ENV"
          echo "artifact_name=${name}" >> "$GITHUB_OUTPUT"

      - name: Collect installed files as artifact (handles .so or .dylib)
        id: collect
        run: |
          set -eux
          PKGLIBDIR="$(pg_config --pkglibdir)"
          SHAREDIR="$(pg_config --sharedir)"
          EXT_DIR="$SHAREDIR/extension"

          mkdir -p artifact/lib artifact/extension
          if [ -f "$PKGLIBDIR/vector.so" ]; then
            cp "$PKGLIBDIR/vector.so" artifact/lib/
          elif [ -f "$PKGLIBDIR/vector.dylib" ]; then
            cp "$PKGLIBDIR/vector.dylib" artifact/lib/
          else
            echo "ERROR: vector shared object not found in $PKGLIBDIR" >&2
            ls -la "$PKGLIBDIR" || true
            exit 1
          fi

          cp "$EXT_DIR"/vector*.sql "$EXT_DIR"/vector.control artifact/extension/

          tar -C artifact -czf "${ARTIFACT_NAME}.tar.gz" .
          echo "tarpath=${ARTIFACT_NAME}.tar.gz" >> "$GITHUB_OUTPUT"

      - name: Upload artifact (tarball)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.meta.outputs.artifact_name }}
          path: ${{ steps.collect.outputs.tarpath }}

  # ===== macOS (osx/arm64) build on Apple Silicon runner =====
  build-macos-arm64:
    name: macOS arm64 (${{ matrix.patch_name }}, Apple Silicon)
    runs-on: macos-15
    strategy:
      fail-fast: false
      matrix:
        patch_file:
          - "pgvector_v0.8.0_hnsw_candidate_pruning_simhash.patch"
          - "pgvector_v0.8.0_hnsw_candidate_pruning_pq.patch"
        include:
          - patch_file: "pgvector_v0.8.0_hnsw_candidate_pruning_simhash.patch"
            patch_name: "SimHash"
          - patch_file: "pgvector_v0.8.0_hnsw_candidate_pruning_pq.patch"
            patch_name: "PQ"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Show effective parameters
        run: |
          echo "PG_MAJOR=$PG_MAJOR"
          echo "PGVECTOR_REF=$PGVECTOR_REF"
          echo "PATCH_FILE=${{ matrix.patch_file }}"
          echo "PATCH_NAME=${{ matrix.patch_name }}"
          echo "Runner: macOS Apple Silicon (arm64)"

      - name: Install PostgreSQL via Homebrew (Apple Silicon)
        run: |
          set -eux
          brew update
          brew install "postgresql@${PG_MAJOR}"
          BREW_PREFIX="$(brew --prefix postgresql@${PG_MAJOR})"
          echo "BREW_PREFIX=${BREW_PREFIX}"
          echo "${BREW_PREFIX}/bin" >> $GITHUB_PATH

      - name: Verify toolchain and pg_config
        run: |
          set -eux
          which clang || true
          which make
          which pg_config
          pg_config --version
          pg_config --pkglibdir
          pg_config --sharedir

      - name: Fetch pgvector source at the requested ref (tag or SHA)
        run: |
          set -eux
          git clone --depth 1 https://github.com/pgvector/pgvector.git /tmp/pgvector
          cd /tmp/pgvector
          git fetch --tags --depth 1 origin "$PGVECTOR_REF" || true
          if git rev-parse --verify --quiet "$PGVECTOR_REF" >/dev/null; then
            git checkout "$PGVECTOR_REF"
          else
            git checkout FETCH_HEAD
          fi
          git --no-pager log -1 --oneline

      - name: Apply patch file
        working-directory: /tmp/pgvector
        run: |
          set -eux
          test -f "${GITHUB_WORKSPACE}/${{ matrix.patch_file }}"
          patch -p1 < "${GITHUB_WORKSPACE}/${{ matrix.patch_file }}"

      - name: Build (macOS arm64)
        working-directory: /tmp/pgvector
        env:
          CC: clang
        run: |
          set -eux
          make clean
          make OPTFLAGS=""

      - name: Install
        working-directory: /tmp/pgvector
        run: |
          set -eux
          make install

      - name: Compute artifact name (osx-arm64)
        id: meta
        run: |
          set -eux
          name="pgvector-${PGVECTOR_REF}-pg${PG_MAJOR}-${{ matrix.patch_name }}-osx-arm64"
          echo "ARTIFACT_NAME=${name}" >> "$GITHUB_ENV"
          echo "artifact_name=${name}" >> "$GITHUB_OUTPUT"

      - name: Collect installed files as artifact (handles .so or .dylib)
        id: collect
        run: |
          set -eux
          PKGLIBDIR="$(pg_config --pkglibdir)"
          SHAREDIR="$(pg_config --sharedir)"
          EXT_DIR="$SHAREDIR/extension"

          mkdir -p artifact/lib artifact/extension
          if [ -f "$PKGLIBDIR/vector.so" ]; then
            cp "$PKGLIBDIR/vector.so" artifact/lib/
          elif [ -f "$PKGLIBDIR/vector.dylib" ]; then
            cp "$PKGLIBDIR/vector.dylib" artifact/lib/
          else
            echo "ERROR: vector shared object not found in $PKGLIBDIR" >&2
            ls -la "$PKGLIBDIR" || true
            exit 1
          fi

          cp "$EXT_DIR"/vector*.sql "$EXT_DIR"/vector.control artifact/extension/

          tar -C artifact -czf "${ARTIFACT_NAME}.tar.gz" .
          echo "tarpath=${ARTIFACT_NAME}.tar.gz" >> "$GITHUB_OUTPUT"

      - name: Upload artifact (tarball)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.meta.outputs.artifact_name }}
          path: ${{ steps.collect.outputs.tarpath }}
